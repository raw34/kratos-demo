// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"demo/internal/conf"
	"demo/internal/merchant/biz"
	data2 "demo/internal/merchant/data"
	"demo/internal/merchant/service"
	"demo/internal/pkg/data"
	"demo/internal/pkg/server"
	biz2 "demo/internal/user/biz"
	data3 "demo/internal/user/data"
	service2 "demo/internal/user/service"
	"github.com/go-kratos/kratos/v2"
)

// Injectors from wire.go:

func wireApp(confServer *conf.Server, confData *conf.Data) (*kratos.App, func(), error) {
	db, err := data.NewDb(confData)
	if err != nil {
		return nil, nil, err
	}
	cmdable, err := data.NewRedisCli(confData)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(db, cmdable)
	if err != nil {
		return nil, nil, err
	}
	merchantRepo := data2.NewMerchantRepo(dataData)
	merchantUseCase := biz.NewMerchantUseCase(merchantRepo)
	businessLineRepo := data2.NewBusinessLineRepo(dataData)
	businessLineUseCase := biz.NewBusinessLineUseCase(businessLineRepo)
	merchantService := service.NewMerchantService(merchantUseCase, businessLineUseCase)
	userRepo := data3.NewUserRepo(dataData)
	userUseCase := biz2.NewUserUseCase(userRepo)
	userService := service2.NewUserService(userUseCase)
	httpServer := server.NewHTTPServer(confServer, merchantService, userService)
	grpcServer := server.NewGRPCServer(confServer, merchantService, userService)
	app := newApp(httpServer, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
